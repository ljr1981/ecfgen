note
	description: "Pixel buffer that replaces original image file.%
		%The original version of this class has been generated by Image Eiffel Code."

class
	IMG_LIBRARY

inherit
	EV_PIXEL_BUFFER

create
	make

feature {NONE} -- Initialization

	make
			-- Initialization
		do
			make_with_size (14, 13)
			fill_memory
		end

feature {NONE} -- Image data

	c_colors_0 (a_ptr: POINTER; a_offset: INTEGER)
			-- Fill `a_ptr' with colors data from `a_offset'.
		external
			"C inline"
		alias
			"{
			{
				#define B(q) \
					#q
				#ifdef EIF_WINDOWS
				#define A(a,r,g,b) \
					B(\x##b\x##g\x##r\x##a)
				#else
				#define A(a,r,g,b) \
					B(\x##r\x##g\x##b\x##a)
				#endif
				char l_data[] = 
				A(FF,FB,A9,8D)A(FF,E8,9B,5F)A(FF,E8,9B,5F)A(FF,EF,4F,4C)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,66,D6,5F)A(FF,93,DA,5B)A(FF,66,D6,5F)A(FF,93,DA,5B)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,E8,9B,5F)A(FF,F0,CD,AE)A(FF,FB,A9,8D)A(FF,CD,71,52)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,93,DA,5B)A(FF,66,D6,5F)A(FF,93,DA,5B)A(FF,66,D6,5F)A(FF,B4,CA,F3)A(FF,B4,CA,F3)A(FF,6D,90,F1)A(FF,E8,9B,5F)A(FF,E8,9B,5F)A(FF,E8,9B,5F)A(FF,CD,71,52)A(FF,D4,53,D4)A(FF,D4,53,D4)A(FF,D4,53,D4)A(FF,66,D6,5F)A(FF,A3,CB,2A)A(FF,66,D6,5F)A(FF,93,DA,5B)A(FF,B4,CA,F3)A(FF,D4,EA,FC)A(FF,6D,90,F1)A(FF,E8,9B,5F)A(FF,FB,A9,8D)A(FF,E8,9B,5F)A(FF,EC,74,70)A(FF,D4,53,D4)A(FF,D4,53,D4)A(FF,C9,7B,83)A(FF,66,D6,5F)A(FF,A3,CB,2A)A(FF,66,D6,5F)A(FF,66,D6,5F)A(FF,90,AC,F4)A(FF,CF,D4,F5)A(FF,6D,90,F1)A(FF,E8,9B,5F)A(FF,E8,9B,5F)A(FF,E8,9B,5F)A(FF,CD,71,52)A(FF,C9,7B,83)A(FF,E2,0C,E2)A(FF,D4,53,D4)A(FF,93,DA,5B)A(FF,93,DA,5B)A(FF,66,D6,5F)A(FF,93,DA,5B)A(FF,90,AC,F4)A(FF,90,AC,F4)A(FF,6D,90,F1)A(FF,EF,4F,4C)A(FF,FB,A9,8D)A(FF,F8,6F,4D)A(FF,D1,6F,6F)A(FF,D4,53,D4)A(FF,D4,53,D4)A(FF,D4,53,D4)A(FF,66,D6,5F)A(FF,A3,CB,2A)A(FF,66,D6,5F)
				A(FF,66,D6,5F)A(FF,90,AC,F4)A(FF,B4,CA,F3)A(FF,6D,90,F1)A(FF,EF,4F,4C)A(FF,E8,9B,5F)A(FF,E8,9B,5F)A(FF,CD,71,52)A(FF,C9,7B,83)A(FF,D4,53,D4)A(FF,D4,53,D4)A(FF,93,DA,5B)A(FF,93,DA,5B)A(FF,66,D6,5F)A(FF,93,DA,5B)A(FF,6D,90,F1)A(FF,8F,CF,F9)A(FF,6D,90,F1)A(FF,EF,4F,4C)A(FF,E8,9B,5F)A(FF,E8,9B,5F)A(FF,CC,5F,60)A(FF,D4,53,D4)A(FF,D4,53,D4)A(FF,C9,7B,83)A(FF,66,D6,5F)A(FF,A3,CB,2A)A(FF,93,DA,5B)A(FF,66,D6,5F)A(FF,6D,90,F1)A(FF,B4,CA,F3)A(FF,6D,90,F1)A(FF,EF,4F,4C)A(FF,E8,9B,5F)A(FF,E8,9B,5F)A(FF,CD,71,52)A(FF,D4,53,D4)A(FF,D4,53,D4)A(FF,D4,53,D4)A(FF,66,D6,5F)A(FF,93,DA,5B)A(FF,66,D6,5F)A(FF,66,D6,5F)A(FF,6D,90,F1)A(FF,AB,B6,FA)A(FF,6D,90,F1)A(FF,DB,3C,42)A(FF,D2,A9,16)A(FF,E8,9B,5F)A(FF,CD,71,52)A(FF,D4,53,D4)A(FF,E2,0C,E2)A(FF,C9,7B,83)A(FF,66,D6,5F)A(FF,93,DA,5B)A(FF,A3,CB,2A)A(FF,66,D6,5F)A(FF,6D,90,F1)A(FF,B4,CA,F3)A(FF,6D,90,F1)A(FF,EF,4F,4C)A(FF,E8,9B,5F)A(FF,F8,6F,4D)A(FF,CD,71,52)A(FF,C9,7B,83)A(FF,D4,53,D4)A(FF,D4,53,D4)A(FF,93,DA,5B)A(FF,93,DA,5B)A(FF,66,D6,5F)A(FF,66,D6,5F)A(FF,6D,90,F1)A(FF,B4,CA,F3)A(FF,6D,90,F1)A(FF,EF,4F,4C)A(FF,E8,9B,5F)A(FF,F8,6F,4D)A(FF,D1,6F,6F)A(FF,D4,53,D4)A(FF,D4,53,D4)
				A(FF,D4,53,D4)A(FF,66,D6,5F)A(FF,A3,CB,2A)A(FF,93,DA,5B)A(FF,66,D6,5F)A(FF,6D,90,F1)A(FF,8F,CF,F9)A(FF,6D,90,F1)A(FF,EF,4F,4C)A(FF,AF,71,51)A(FF,AF,71,51)A(FF,AF,71,51)A(FF,D4,53,D4)A(FF,9E,6B,A2)A(FF,9E,6B,A2)A(FF,91,A6,52)A(FF,66,D6,5F)A(FF,63,A3,5D)A(FF,4E,A6,1B)A(FF,6A,70,F5)A(FF,4B,57,EE)A(FF,4B,57,EE);
				memcpy ((EIF_NATURAL_32 *)$a_ptr + $a_offset, &l_data, sizeof l_data - 1);
			}
			}"
		end

	build_colors (a_ptr: POINTER)
			-- Build `colors'.
		do
			c_colors_0 (a_ptr, 0)
		end

feature {NONE} -- Image data filling.

	fill_memory
			-- Fill image data into memory.
		local
			l_pointer: POINTER
		do
			if attached {EV_PIXEL_BUFFER_IMP} implementation as l_imp then
				l_pointer := l_imp.data_ptr
				if not l_pointer.is_default_pointer then
					build_colors (l_pointer)
					l_imp.unlock
				end
			end
		end

end -- IMG_LIBRARY
