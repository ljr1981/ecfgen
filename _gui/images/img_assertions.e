note
	description: "Pixel buffer that replaces original image file.%
		%The original version of this class has been generated by Image Eiffel Code."

class
	IMG_ASSERTIONS

inherit
	EV_PIXEL_BUFFER

create
	make

feature {NONE} -- Initialization

	make
			-- Initialization
		do
			make_with_size (15, 16)
			fill_memory
		end

feature {NONE} -- Image data

	c_colors_0 (a_ptr: POINTER; a_offset: INTEGER)
			-- Fill `a_ptr' with colors data from `a_offset'.
		external
			"C inline"
		alias
			"{
			{
				#define B(q) \
					#q
				#ifdef EIF_WINDOWS
				#define A(a,r,g,b) \
					B(\x##b\x##g\x##r\x##a)
				#else
				#define A(a,r,g,b) \
					B(\x##r\x##g\x##b\x##a)
				#endif
				char l_data[] = 
				A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,F0,F1,FB)A(FF,CF,D4,F5)A(FF,CF,D4,F5)A(FF,AB,B6,FA)A(FF,90,AC,F4)A(FF,6D,90,F1)A(FF,6D,90,F1)A(FF,90,AC,F4)A(FF,90,AC,F4)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,CF,D4,F5)A(FF,F0,F1,FB)A(FF,F0,F1,FB)A(FF,F0,F1,FB)A(FF,F0,F1,FB)A(FF,F0,F1,FB)A(FF,D4,EA,FC)A(FF,CF,D4,F5)A(FF,90,AC,F4)A(FF,50,8A,D4)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,F0,F1,FB)A(FF,CF,D4,F5)A(FF,AB,B6,FA)A(FF,90,AC,F4)A(FF,6D,90,F1)A(FF,31,77,F0)A(FF,31,77,F0)A(FF,6D,90,F1)A(FF,4B,77,EE)A(FF,F0,F1,FB)A(FF,CF,D4,F5)A(FF,6D,90,F1)A(FF,F0,F1,FB)A(FF,50,8A,D4)A(FF,FF,FF,FF)A(FF,CF,D4,F5)A(FF,F0,F1,FB)A(FF,F0,F1,FB)A(FF,F0,F1,FB)A(FF,F0,F1,FB)A(FF,F0,F1,FB)A(FF,D4,EA,FC)A(FF,DE,A8,E4)A(FF,6D,90,F1)A(FF,15,65,D0)A(FF,CF,D4,F5)A(FF,AB,B6,FA)A(FF,73,A6,EB)A(FF,6D,90,F1)A(FF,50,8A,D4)A(FF,B4,CA,F3)A(FF,CF,D4,F5)A(FF,E7,D8,E6)A(FF,CB,B1,B1)A(FF,9E,6B,A2)A(FF,EE,D2,D0)A(FF,F0,F1,FB)A(FF,CF,D4,F5)A(FF,54,89,EA)A(FF,F0,F1,FB)A(FF,15,65,D0)A(FF,CF,D4,F5)A(FF,CF,D4,F5)A(FF,CF,D4,F5)A(FF,54,89,EA)A(FF,AB,B6,FA)A(FF,8D,91,B2)A(FF,D1,6F,6F)A(FF,CB,B1,B1)A(FF,E8,9B,5F)
				A(FF,AF,70,70)A(FF,DE,A8,E4)A(FF,CF,D4,F5)A(FF,89,95,F9)A(FF,54,89,EA)A(FF,31,77,F0)A(FF,13,57,B5)A(FF,F0,F1,FB)A(FF,F0,F1,FB)A(FF,54,89,EA)A(FF,90,AC,F4)A(FF,9E,6B,A2)A(FF,F0,F1,FB)A(FF,F0,F1,FB)A(FF,F0,F1,FB)A(FF,91,4D,4C)A(FF,AE,93,91)A(FF,CF,D4,F5)A(FF,CF,D4,F5)A(FF,CF,D4,F5)A(FF,DE,A8,E4)A(FF,1E,73,EE)A(FF,F0,F1,FB)A(FF,CF,D4,F5)A(FF,50,8A,D4)A(FF,6D,90,F1)A(FF,D1,6F,6F)A(FF,F0,F1,FB)A(FF,F0,F1,FB)A(FF,F0,F1,FB)A(FF,E8,AC,AC)A(FF,E7,D8,E6)A(FF,F0,F1,FB)A(FF,D4,EA,FC)A(FF,F0,F1,FB)A(FF,D4,EA,FC)A(FF,1E,73,EE)A(FF,AF,AF,AF)A(FF,F0,F1,FB)A(FF,50,8A,D4)A(FF,4B,77,EE)A(FF,6E,34,46)A(FF,E8,AC,AC)A(FF,F0,F1,FB)A(FF,FB,A9,8D)A(FF,9E,6B,A2)A(FF,D9,D9,D9)A(FF,F0,F1,FB)A(FF,F0,F1,FB)A(FF,F0,F1,FB)A(FF,CF,D4,F5)A(FF,31,77,F0)A(FF,F0,F1,FB)A(FF,CF,D4,F5)A(FF,50,8A,D4)A(FF,4B,77,EE)A(FF,8D,91,B2)A(FF,91,4D,4C)A(FF,91,4D,4C)A(FF,73,0C,0C)A(FF,91,4D,4C)A(FF,AE,93,91)A(FF,F0,F1,FB)A(FF,8F,8F,8F)A(FF,5A,6A,A0)A(FF,F0,F1,FB)A(FF,15,65,D0)A(FF,AF,AF,AF)A(FF,F0,F1,FB)A(FF,50,8A,D4)A(FF,31,77,F0)A(FF,F0,F1,FB)A(FF,AF,AF,AF)A(FF,73,0C,0C)A(FF,73,0C,0C)A(FF,8E,2C,2D)A(FF,DE,A8,E4)A(FF,F0,F1,FB)A(FF,F0,F1,FB)A(FF,F0,F1,FB)
				A(FF,F0,F1,FB)A(FF,10,5A,C4)A(FF,F0,F1,FB)A(FF,F0,F1,FB)A(FF,5A,6A,A0)A(FF,31,77,F0)A(FF,F0,F1,FB)A(FF,AE,93,91)A(FF,9C,32,4C)A(FF,98,62,12)A(FF,7A,30,31)A(FF,B3,5C,67)A(FF,F0,F1,FB)A(FF,8F,8F,8F)A(FF,5A,6A,A0)A(FF,F0,F1,FB)A(FF,13,57,B5)A(FF,AF,AF,AF)A(FF,F0,F1,FB)A(FF,50,8A,D4)A(FF,31,77,F0)A(FF,D4,EA,FC)A(FF,D9,D9,D9)A(FF,9C,32,4C)A(FF,91,4D,4C)A(FF,91,4D,4C)A(FF,73,0C,0C)A(FF,CB,B1,B1)A(FF,E7,D8,E6)A(FF,F0,F1,FB)A(FF,F0,F1,FB)A(FF,13,57,B5)A(FF,D4,EA,FC)A(FF,F0,F1,FB)A(FF,50,8A,D4)A(FF,31,77,F0)A(FF,CF,D4,F5)A(FF,AE,93,91)A(FF,7A,30,31)A(FF,B3,4C,4D)A(FF,AE,93,91)A(FF,9E,6B,A2)A(FF,AA,97,B5)A(FF,F0,F1,FB)A(FF,8F,8F,8F)A(FF,F0,F1,FB)A(FF,10,5A,C4)A(FF,47,78,D7)A(FF,50,8A,D4)A(FF,50,8A,D4)A(FF,31,77,F0)A(FF,F0,F1,FB)A(FF,D9,D9,D9)A(FF,92,6D,6C)A(FF,AF,70,70)A(FF,CB,B1,B1)A(FF,CF,D4,F5)A(FF,F0,F1,FB)A(FF,E7,D8,E6)A(FF,F0,F1,FB)A(FF,F0,F1,FB)A(FF,10,5A,C4)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,54,89,EA)A(FF,54,89,EA)A(FF,6D,90,F1)A(FF,5A,6A,A0)A(FF,5A,6A,A0)A(FF,8A,94,CC)A(FF,13,57,B5)A(FF,13,57,B5)A(FF,13,57,B5)A(FF,10,5A,C4)A(FF,15,65,D0)A(FF,15,65,D0)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF);
				memcpy ((EIF_NATURAL_32 *)$a_ptr + $a_offset, &l_data, sizeof l_data - 1);
			}
			}"
		end

	build_colors (a_ptr: POINTER)
			-- Build `colors'.
		do
			c_colors_0 (a_ptr, 0)
		end

feature {NONE} -- Image data filling.

	fill_memory
			-- Fill image data into memory.
		local
			l_pointer: POINTER
		do
			if attached {EV_PIXEL_BUFFER_IMP} implementation as l_imp then
				l_pointer := l_imp.data_ptr
				if not l_pointer.is_default_pointer then
					build_colors (l_pointer)
					l_imp.unlock
				end
			end
		end

end -- IMG_ASSERTIONS
