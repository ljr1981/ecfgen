note
	description: "Pixel buffer that replaces original image file.%
		%The original version of this class has been generated by Image Eiffel Code."

class
	IMG_LIBRARIES

inherit
	EV_PIXEL_BUFFER

create
	make

feature {NONE} -- Initialization

	make
			-- Initialization
		do
			make_with_size (17, 14)
			fill_memory
		end

feature {NONE} -- Image data

	c_colors_0 (a_ptr: POINTER; a_offset: INTEGER)
			-- Fill `a_ptr' with colors data from `a_offset'.
		external
			"C inline"
		alias
			"{
			{
				#define B(q) \
					#q
				#ifdef EIF_WINDOWS
				#define A(a,r,g,b) \
					B(\x##b\x##g\x##r\x##a)
				#else
				#define A(a,r,g,b) \
					B(\x##r\x##g\x##b\x##a)
				#endif
				char l_data[] = 
				A(FF,FF,FF,FF)A(FF,F3,F0,8E)A(FF,AE,AD,36)A(FF,B2,B2,09)A(FF,B2,B2,09)A(FF,AE,AD,36)A(FF,92,92,05)A(FF,92,92,05)A(FF,B2,B2,09)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,ED,E9,4E)A(FF,B2,B2,09)A(FF,F0,F1,FB)A(FF,F5,F3,D3)A(FF,F0,F1,FB)A(FF,F3,F0,8E)A(FF,EF,EA,71)A(FF,ED,E9,4E)A(FF,92,92,05)A(FF,B2,B2,09)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,B2,B2,09)A(FF,F0,F1,FB)A(FF,F5,F3,D3)A(FF,F4,F2,AA)A(FF,F3,F0,8E)A(FF,F3,F0,8E)A(FF,F3,F0,8E)A(FF,F3,F0,8E)A(FF,ED,E9,4E)A(FF,B2,B2,09)A(FF,B2,B2,09)A(FF,B2,B2,09)A(FF,92,92,05)A(FF,92,92,05)A(FF,92,92,05)A(FF,B2,B2,09)A(FF,FF,FF,FF)A(FF,B2,B2,09)A(FF,F0,F1,FB)A(FF,EF,EA,71)A(FF,EF,EA,71)A(FF,EF,EA,71)A(FF,EF,EA,71)A(FF,EF,EA,71)A(FF,EF,EA,71)A(FF,F1,D3,71)A(FF,ED,E9,4E)A(FF,ED,E9,4E)A(FF,EA,D5,2B)A(FF,F3,EE,2C)A(FF,EC,D7,13)A(FF,EC,EC,13)A(FF,92,92,05)A(FF,FF,FF,FF)A(FF,D6,D4,0F)A(FF,F5,F3,D3)A(FF,F8,6F,4D)A(FF,D8,48,07)A(FF,EE,51,0A)A(FF,EC,EC,13)A(FF,EC,EC,13)A(FF,EC,EC,13)A(FF,39,B0,00)A(FF,39,B0,00)A(FF,39,B0,00)A(FF,90,AC,F4)
				A(FF,4B,77,EE)A(FF,4B,77,EE)A(FF,EC,D7,13)A(FF,92,92,05)A(FF,FF,FF,FF)A(FF,B2,B2,09)A(FF,F3,F0,8E)A(FF,D8,48,07)A(FF,F8,6F,4D)A(FF,D8,48,07)A(FF,9C,32,4C)A(FF,E2,0C,E2)A(FF,A2,07,A2)A(FF,39,B0,00)A(FF,4F,D3,13)A(FF,39,B0,00)A(FF,4B,77,EE)A(FF,90,AC,F4)A(FF,4B,77,EE)A(FF,D6,D4,0F)A(FF,70,70,01)A(FF,FF,FF,FF)A(FF,92,92,05)A(FF,F3,F0,8E)A(FF,EE,51,0A)A(FF,F4,4F,2E)A(FF,C8,2F,15)A(FF,99,01,2A)A(FF,E2,0C,E2)A(FF,A2,07,A2)A(FF,31,93,02)A(FF,39,B0,00)A(FF,31,93,02)A(FF,4B,77,EE)A(FF,6D,90,F1)A(FF,4B,77,EE)A(FF,D6,D4,0F)A(FF,70,70,01)A(FF,FF,FF,FF)A(FF,92,92,05)A(FF,EF,EA,71)A(FF,AE,2A,10)A(FF,EE,51,0A)A(FF,EE,51,0A)A(FF,99,01,2A)A(FF,A2,07,A2)A(FF,A2,07,A2)A(FF,31,93,02)A(FF,39,B0,00)A(FF,31,93,02)A(FF,00,78,B7)A(FF,6D,90,F1)A(FF,4B,77,EE)A(FF,D6,D4,0F)A(FF,70,70,01)A(FF,FF,FF,FF)A(FF,92,92,05)A(FF,EF,EA,71)A(FF,D8,48,07)A(FF,F4,4F,2E)A(FF,D8,48,07)A(FF,99,01,2A)A(FF,A2,07,A2)A(FF,A2,07,A2)A(FF,31,93,02)A(FF,3F,C1,00)A(FF,31,93,02)A(FF,15,65,D0)A(FF,6D,90,F1)A(FF,4B,77,EE)A(FF,D6,D4,0F)A(FF,70,70,01)A(FF,FF,FF,FF)A(FF,92,92,05)A(FF,ED,E9,4E)A(FF,B1,0A,05)A(FF,EE,51,0A)A(FF,EE,51,0A)A(FF,99,01,2A)A(FF,A2,07,A2)
				A(FF,A2,07,A2)A(FF,31,93,02)A(FF,39,B0,00)A(FF,31,93,02)A(FF,2A,97,AD)A(FF,54,89,EA)A(FF,15,65,D0)A(FF,D6,D4,0F)A(FF,4F,50,09)A(FF,FF,FF,FF)A(FF,92,92,05)A(FF,EA,D5,2B)A(FF,D5,05,04)A(FF,EE,51,0A)A(FF,C8,2F,15)A(FF,9C,32,4C)A(FF,A2,07,A2)A(FF,A2,07,A2)A(FF,31,93,02)A(FF,39,B0,00)A(FF,0B,92,00)A(FF,15,65,D0)A(FF,6D,90,F1)A(FF,00,78,B7)A(FF,D6,D4,0F)A(FF,70,70,01)A(FF,FF,FF,FF)A(FF,70,70,01)A(FF,F3,EE,2C)A(FF,B1,0A,05)A(FF,AE,2A,10)A(FF,95,2F,03)A(FF,9C,32,4C)A(FF,A2,07,A2)A(FF,73,00,73)A(FF,4E,A6,1B)A(FF,31,93,02)A(FF,31,93,02)A(FF,13,57,B5)A(FF,25,56,FE)A(FF,2B,2D,FB)A(FF,D6,D4,0F)A(FF,70,70,01)A(FF,FF,FF,FF)A(FF,70,70,01)A(FF,EC,D7,13)A(FF,EC,D7,13)A(FF,EC,D7,13)A(FF,D6,D4,0F)A(FF,D6,D4,0F)A(FF,D6,D4,0F)A(FF,D6,D4,0F)A(FF,D6,D4,0F)A(FF,D6,D4,0F)A(FF,D6,D4,0F)A(FF,D6,D4,0F)A(FF,D2,A9,16)A(FF,D6,D4,0F)A(FF,B2,B2,09)A(FF,92,92,05)A(FF,FF,FF,FF)A(FF,70,70,01)A(FF,70,70,01)A(FF,70,70,01)A(FF,70,70,01)A(FF,70,70,01)A(FF,70,70,01)A(FF,70,70,01)A(FF,70,70,01)A(FF,6F,56,01)A(FF,70,70,01)A(FF,4F,50,09)A(FF,6F,56,01)A(FF,4B,71,00)A(FF,70,70,01)A(FF,4E,A6,1B)A(FF,AD,8D,05)A(FF,FF,FF,FF);
				memcpy ((EIF_NATURAL_32 *)$a_ptr + $a_offset, &l_data, sizeof l_data - 1);
			}
			}"
		end

	build_colors (a_ptr: POINTER)
			-- Build `colors'.
		do
			c_colors_0 (a_ptr, 0)
		end

feature {NONE} -- Image data filling.

	fill_memory
			-- Fill image data into memory.
		local
			l_pointer: POINTER
		do
			if attached {EV_PIXEL_BUFFER_IMP} implementation as l_imp then
				l_pointer := l_imp.data_ptr
				if not l_pointer.is_default_pointer then
					build_colors (l_pointer)
					l_imp.unlock
				end
			end
		end

end -- IMG_LIBRARIES
