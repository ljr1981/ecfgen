note
	description: "Pixel buffer that replaces original image file.%
		%The original version of this class has been generated by Image Eiffel Code."

class
	IMG_TREE_ITEM

inherit
	EV_PIXEL_BUFFER

create
	make

feature {NONE} -- Initialization

	make
			-- Initialization
		do
			make_with_size (16, 16)
			fill_memory
		end

feature {NONE} -- Image data

	c_colors_0 (a_ptr: POINTER; a_offset: INTEGER)
			-- Fill `a_ptr' with colors data from `a_offset'.
		external
			"C inline"
		alias
			"{
			{
				#define B(q) \
					#q
				#ifdef EIF_WINDOWS
				#define A(a,r,g,b) \
					B(\x##b\x##g\x##r\x##a)
				#else
				#define A(a,r,g,b) \
					B(\x##r\x##g\x##b\x##a)
				#endif
				char l_data[] = 
				A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,7C,7C,5E)A(FF,9A,9A,55)A(FF,DC,DC,DD)A(FF,AD,AD,B0)A(FF,FD,FD,FD)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,F7,F7,F7)A(FF,F5,F5,EB)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,F7,F7,F7)A(FF,F7,F7,F7)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,FF,FE,FC)A(FF,FF,FF,FF)A(FF,9A,9A,55)A(FF,7C,7C,5E)A(FF,F9,F9,FD)A(FF,6F,6F,6F)A(FF,A5,A5,A5)A(FF,D0,D0,D0)A(FF,F7,F7,F7)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,BC,BB,B1)
				A(FF,BC,BB,B1)A(FF,FF,FE,FC)A(FF,FF,FF,FF)A(FF,F7,F7,F7)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,FF,FE,FC)A(FF,FF,FF,FF)A(FF,A1,A1,71)A(FF,9B,9B,70)A(FF,E3,E3,E8)A(FF,D6,D6,D6)A(FF,BB,BB,BB)A(FF,C0,C0,C0)A(FF,A5,A5,A5)A(FF,D5,D5,D5)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,FF,FE,FC)A(FF,FF,FF,FF)A(FF,FF,FE,FC)A(FF,FF,FE,FC)A(FF,FF,FE,FC)A(FF,FF,FE,FC)A(FF,FF,FF,FF)A(FF,FF,FE,FC)A(FF,FF,FE,FC)A(FF,FF,FE,FC)A(FF,FF,FF,FF)A(FF,FF,FE,FC)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,FF,FE,FC)A(FF,FF,FF,FF)A(FF,96,96,62)A(FF,AF,AF,9D)A(FF,E0,E0,E3)A(FF,C6,C6,C6)A(FF,99,99,99)A(FF,93,93,93)A(FF,8A,8A,8A)A(FF,A6,A6,A6)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,FF,FE,FC)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,80,80)A(FF,FF,FF,FF)A(FF,FF,80,80)A(FF,FF,FF,FF)A(FF,FF,80,80)A(FF,FF,FF,FF)A(FF,FF,80,80)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,BC,BB,B1)
				A(FF,BC,BB,B1)A(FF,FF,FE,FC)A(FF,FF,FE,FC)A(FF,FF,FE,FC)A(FF,FF,FE,FC)A(FF,96,95,57)A(FF,FF,FF,FF)A(FF,34,6C,CA)A(FF,28,65,C7)A(FF,4D,80,D4)A(FF,28,65,C7)A(FF,64,91,D8)A(FF,0F,54,C2)A(FF,FF,80,80)A(FF,FF,FF,FF)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,FF,FE,FC)A(FF,FF,FF,FF)A(FF,FF,FE,FC)A(FF,FF,FE,FC)A(FF,E4,E5,E1)A(FF,FF,80,80)A(FF,2D,69,C8)A(FF,43,79,CF)A(FF,40,77,CE)A(FF,43,79,CF)A(FF,3A,72,CC)A(FF,0B,52,C3)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,FB,FB,F9)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,80,80)A(FF,FF,FF,FF)A(FF,FF,80,80)A(FF,FF,FF,FF)A(FF,FF,80,80)A(FF,FF,FF,FF)A(FF,FF,80,80)A(FF,FF,FF,FF)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FE,FC)A(FF,FF,FE,FC)A(FF,96,95,57)A(FF,A2,A2,73)A(FF,BC,BC,C2)A(FF,9E,9E,9E)A(FF,A3,A3,A3)A(FF,75,75,74)A(FF,BB,BA,BA)A(FF,B5,B5,B4)A(FF,B3,B2,B2)A(FF,FF,FF,FF)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FE,FC)A(FF,FF,FE,FC)A(FF,FF,FE,FC)A(FF,FF,FE,FC)A(FF,FF,FE,FC)A(FF,FF,FE,FC)A(FF,FF,FE,FC)A(FF,FF,FE,FC)A(FF,FF,FE,FC)A(FF,FF,FF,FF)A(FF,BC,BB,B1)
				A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1)A(FF,BC,BB,B1);
				memcpy ((EIF_NATURAL_32 *)$a_ptr + $a_offset, &l_data, sizeof l_data - 1);
			}
			}"
		end

	build_colors (a_ptr: POINTER)
			-- Build `colors'.
		do
			c_colors_0 (a_ptr, 0)
		end

feature {NONE} -- Image data filling.

	fill_memory
			-- Fill image data into memory.
		local
			l_pointer: POINTER
		do
			if attached {EV_PIXEL_BUFFER_IMP} implementation as l_imp then
				l_pointer := l_imp.data_ptr
				if not l_pointer.is_default_pointer then
					build_colors (l_pointer)
					l_imp.unlock
				end
			end
		end

end -- EV_TREE_ITEM
